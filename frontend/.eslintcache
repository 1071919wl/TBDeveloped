[{"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/index.js":"1","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/store/store.js":"2","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/session_actions.js":"3","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/session_api_util.js":"4","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/root.js":"5","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/app.js":"6","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/root_reducer.js":"7","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/route_util.js":"8","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/session_reducer.js":"9","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/entities_reducer.js":"10","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/errors_reducer.js":"11","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_show_container.js":"12","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board_container.js":"13","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/signup_form_container.js":"14","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/login_form_container.js":"15","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_show_container.js":"16","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/nav/navbar_container.js":"17","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/room_container.js":"18","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/profile/profile_container.js":"19","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/main/main_page.js":"20","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/room.js":"21","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/questions_reducer.js":"22","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/profile_reducer.js":"23","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/questions_errors_reducer.js":"24","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/responses_reducer.js":"25","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/messages_reducer.js":"26","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/responses_errors_reducer.js":"27","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/questions_actions.js":"28","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board.js":"29","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/login_form.js":"30","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_show.js":"31","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/session_errors_reducer.js":"32","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/nav/navbar.js":"33","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/user_reducer.js":"34","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/profile/profile.js":"35","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/signup_form.js":"36","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_show.js":"37","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_index.js":"38","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/messages_actions.js":"39","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/questions_api_util.js":"40","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/responses_actions.js":"41","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/create_question_form_container.js":"42","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_index.js":"43","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/update_question_form_container.js":"44","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/create_room.js":"45","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_container.js":"46","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_item_container.js":"47","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/create_answers_form_container.js":"48","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/messages_api_util.js":"49","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/responses_api_util.js":"50","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_form.js":"51","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index.js":"52","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_item.js":"53","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_form.js":"54"},{"size":1259,"mtime":1611104341284,"results":"55","hashOfConfig":"56"},{"size":930,"mtime":1611104341347,"results":"57","hashOfConfig":"56"},{"size":1775,"mtime":1611104341142,"results":"58","hashOfConfig":"56"},{"size":574,"mtime":1611104341359,"results":"59","hashOfConfig":"56"},{"size":286,"mtime":1611104341272,"results":"60","hashOfConfig":"56"},{"size":1492,"mtime":1611104341222,"results":"61","hashOfConfig":"56"},{"size":272,"mtime":1611104341338,"results":"62","hashOfConfig":"56"},{"size":1237,"mtime":1611104341357,"results":"63","hashOfConfig":"56"},{"size":788,"mtime":1611104341341,"results":"64","hashOfConfig":"56"},{"size":481,"mtime":1611104341286,"results":"65","hashOfConfig":"56"},{"size":383,"mtime":1611104341288,"results":"66","hashOfConfig":"56"},{"size":1019,"mtime":1611104341256,"results":"67","hashOfConfig":"56"},{"size":466,"mtime":1611104341225,"results":"68","hashOfConfig":"56"},{"size":623,"mtime":1611104341283,"results":"69","hashOfConfig":"56"},{"size":513,"mtime":1611104341278,"results":"70","hashOfConfig":"56"},{"size":877,"mtime":1611104341271,"results":"71","hashOfConfig":"56"},{"size":511,"mtime":1611104341240,"results":"72","hashOfConfig":"56"},{"size":211,"mtime":1611104341230,"results":"73","hashOfConfig":"56"},{"size":607,"mtime":1611104341249,"results":"74","hashOfConfig":"56"},{"size":5851,"mtime":1611104341235,"results":"75","hashOfConfig":"56"},{"size":15624,"mtime":1611104341228,"results":"76","hashOfConfig":"56"},{"size":847,"mtime":1611122152434,"results":"77","hashOfConfig":"56"},{"size":297,"mtime":1611104341290,"results":"78","hashOfConfig":"56"},{"size":354,"mtime":1611104341291,"results":"79","hashOfConfig":"56"},{"size":565,"mtime":1611104341335,"results":"80","hashOfConfig":"56"},{"size":770,"mtime":1611104341289,"results":"81","hashOfConfig":"56"},{"size":354,"mtime":1611104341330,"results":"82","hashOfConfig":"56"},{"size":2856,"mtime":1611104341139,"results":"83","hashOfConfig":"56"},{"size":2251,"mtime":1611122136296,"results":"84","hashOfConfig":"56"},{"size":2712,"mtime":1611104341275,"results":"85","hashOfConfig":"56"},{"size":1003,"mtime":1611104341269,"results":"86","hashOfConfig":"56"},{"size":487,"mtime":1611104341340,"results":"87","hashOfConfig":"56"},{"size":5174,"mtime":1611104341236,"results":"88","hashOfConfig":"56"},{"size":562,"mtime":1611104341344,"results":"89","hashOfConfig":"56"},{"size":8549,"mtime":1611104341243,"results":"90","hashOfConfig":"56"},{"size":7095,"mtime":1611104341282,"results":"91","hashOfConfig":"56"},{"size":6438,"mtime":1611136441229,"results":"92","hashOfConfig":"56"},{"size":1016,"mtime":1611104341253,"results":"93","hashOfConfig":"56"},{"size":1188,"mtime":1611104341113,"results":"94","hashOfConfig":"56"},{"size":696,"mtime":1611104341350,"results":"95","hashOfConfig":"56"},{"size":1155,"mtime":1611104341141,"results":"96","hashOfConfig":"56"},{"size":654,"mtime":1611104341250,"results":"97","hashOfConfig":"56"},{"size":931,"mtime":1611104341258,"results":"98","hashOfConfig":"56"},{"size":1111,"mtime":1611104341257,"results":"99","hashOfConfig":"56"},{"size":489,"mtime":1611104341226,"results":"100","hashOfConfig":"56"},{"size":782,"mtime":1611104341214,"results":"101","hashOfConfig":"56"},{"size":551,"mtime":1611104341217,"results":"102","hashOfConfig":"56"},{"size":762,"mtime":1611120511369,"results":"103","hashOfConfig":"56"},{"size":481,"mtime":1611104341349,"results":"104","hashOfConfig":"56"},{"size":813,"mtime":1611104341355,"results":"105","hashOfConfig":"56"},{"size":2749,"mtime":1611120577923,"results":"106","hashOfConfig":"56"},{"size":1528,"mtime":1611104341211,"results":"107","hashOfConfig":"56"},{"size":1625,"mtime":1611121705936,"results":"108","hashOfConfig":"56"},{"size":5115,"mtime":1611134026013,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"11hnl7n",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"112"},"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/index.js",[],["230","231"],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/store/store.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/session_actions.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/session_api_util.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/root.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/app.js",["232"],"import React from 'react';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Route, Switch } from 'react-router-dom';\nimport NavBarContainer from './nav/navbar_container';\nimport MainPage from './main/main_page';\nimport BulletinBoardContainer from './bulletin_board/bulletin_board_container'\nimport QuestionShowContainer from './question/question_show_container'\nimport ResolvedShowContainer from './resolved/resolved_show_container'\nimport LoginFormContainer from './session/login_form_container';\nimport SignupFormContainer from './session/signup_form_container';\nimport ProfileFormContainer from './profile/profile_container'\nimport RoomContainer from './chatroom/room_container'\n// Room component \nimport Room from \"./chatroom/room\"\n\nconst App = () => (\n  <div>\n    <NavBarContainer />\n    <Switch>\n      <Route path=\"/room/:roomID\" component={RoomContainer}/>\n      <AuthRoute exact path=\"/\" component={MainPage} />\n      <AuthRoute exact path=\"/login\" component={LoginFormContainer} />\n      <AuthRoute exact path=\"/signup\" component={SignupFormContainer} />\n      <ProtectedRoute exact path=\"/profile\" component={ProfileFormContainer} />\n      <ProtectedRoute exact path=\"/bulletin\" component={BulletinBoardContainer} />\n      <ProtectedRoute exact path=\"/question/:questionId\" component={QuestionShowContainer} />\n      <ProtectedRoute exact path=\"/resolved/:resolvedId\" component={ResolvedShowContainer} />\n      \n    </Switch>\n  </div>\n);\n\nexport default App;","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/root_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/route_util.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/session_reducer.js",["233"],"import { RECEIVE_CURRENT_USER, RECEIVE_USER_LOGOUT, RECEIVE_USER_SIGN_IN} from '../actions/session_actions'\n\nconst initialState = { isAuthenticated: false, user: {} };\n\nexport default function(state = initialState, action) {\n\n    switch (action.type) {\n        case RECEIVE_CURRENT_USER:\n            return { \n                ...state,\n                isAuthenticated: !!action.currentUser,\n                user: action.currentUser\n            };\n            \n        case RECEIVE_USER_SIGN_IN:\n            return { \n                ...state,\n                isSignedIn: true\n            }\n\n        case RECEIVE_USER_LOGOUT:\n            return {\n            isAuthenticated: false,\n            user: undefined\n            };\n\n        default:\n            return state;\n\n        \n    }\n\n}\n","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/entities_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/errors_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_show_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/signup_form_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/login_form_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_show_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/nav/navbar_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/room_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/profile/profile_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/main/main_page.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/room.js",["234","235","236","237","238","239","240","241"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport '../../assets/stylesheets/reset.css';\nimport '../../assets/stylesheets/room.scss';\n\n\n\nconst Room = (props) => {\n\n\n    //!TEST\n        let [peers, setPeers] = useState([]);\n        const [mute, setMute] = useState('Mute');\n        const [video, setVideo] = useState('Video Off');\n        const[trigger, setOn] = useState('off');\n    //!TEST\n        // const [test, setTest] = useState(0);\n\n\n    //!TEST\n        \n        \n    // const [mute, setMute] = useState('Mute'); \n    // const [video, setVideo] = useState('Video Off');\n\n    const userVideo = useRef(); //for video html\n    const partnerVideo = useRef(); //for video html\n    const peerRef = useRef(); //rtc peerConnection\n    const socketRef = useRef();\n    const otherUser = useRef(); //otherUser - generated ID\n    const userStream = useRef();\n    // const setPeers = useRef();\n    \n\n    // 1/1/21 test\n    const otherVideos = useRef(new Array());\n    const otherUsers = useRef(new Array()); \n    // const peers = useRef(new Object()); \n    const otherUserName = useRef(\"\")\n    // 1/1/21 test\n\n    useEffect(() => {\n\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(MediaStream => {\n            userVideo.current.srcObject = MediaStream;\n            userStream.current = MediaStream;\n\n            socketRef.current = io.connect(\"/\");\n            // console.log(socketRef.current)\n\n            \n            // 1/3/21\n            socketRef.current.emit(\"send name\", props.user)\n            socketRef.current.on(\"receive name\", userName => {\n                otherUserName.current = userName\n                setOn('on');\n            })\n            // 1/3/21\n            \n            socketRef.current.emit(\"join room\", props.match.params.roomID);\n            \n            // has the socket emit this event, this event is caught by the server. I believe there's some \n            // 'long polling' involved. Interesting because the connection happens while this is on localhost 3000\n            // and the server is on 5000  \n\n        \n            // i believe the below code only runs when the events happen, after the above event is emitted\n            // it triggers a slew of events on the server side \n            socketRef.current.on('other user', userID => {\n                callUser(userID);\n                otherUser.current = userID;\n                // console.log('user A is in the room already', userID)\n\n\n                // 1/1/21 test\n                otherUsers.current.push(userID) \n                    // may have to concat in a situation where a user joins \n                    // and there are multiple existing users\n                    // they would have to make a call to each of the existing users\n\n                // otherUsers.current.forEach( (user) => {\n                //     callUser(user)\n                // })\n\n                // 1/1/21 test\n            });\n\n            // the above event is emitted from the server back to the client who created a chatroom, it basically \n            // it basically says to the user, hey there's someone in this room \n            // likely whats happening is someone clicked on a room link and this component mounts and they're alerted\n            // that there's another user, and also given the other users socket id \n            // so if the above happens then two users are sitting in the same room. \n            // but their sockets need to connect \n            // this i where the callUser function comes in. Essentially it calls the OTHER USER  \n\n            socketRef.current.on(\"user joined\", userID => {\n\n                otherUser.current = userID;\n\n                // 1/1/21 test\n                otherUsers.current.push(userID)\n                // this may not need concat because it should only\n                // be one user being added at a time \n                // this is from the perspective of existing users in the room \n                // 1/1/21 test\n\n                // console.log('other user joined room')\n            });\n\n            socketRef.current.emit(\"user joined\", userID => {\n                otherUser.current = userID;\n                // console.log('user B just joined the room', userID)\n\n            });\n            \n\n\n            //!TEST - WL - trying to remove video on meeting exit\n            socketRef.current.on( \"user left\", id => {\n                const peerObj = peerRef.current.find(p => p.peerID === id);\n                if (peerObj){\n                    peerObj.peer.destroy();\n                }\n                const peers = peerRef.current.filter(p => p.peerID !== id);\n                peerRef.current = peers;\n                setPeers(peers); //state\n                \n            })\n            // finding the peer, destorying the peer, and removing it from the array\n            // socketRef.current.on(\"disconnect\", () => {\n            //     console.log('dIsCoNnEcTeD')\n                \n            // });\n\n            // socketRef.current.on( \"user-disconnected\", room => {\n            //     console.log('room', room)\n                // const peerObj = peerRef.current.find(p => p.peerID === id);\n                // if (peerObj){\n                //     peerObj.peer.destroy();\n                // }\n                // const peers = peerRef.current.filter(p => p.peerID !== id);\n                // peerRef.current = peers;\n                // setPeers(peers); //state\n\n            // })\n            //finding the peer, destorying the peer, and removing it from the array\n            //!TEST\n\n            socketRef.current.on(\"offer\", handleRecieveCall);\n\n            socketRef.current.on(\"answer\", handleAnswer);\n\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n\n            // 1/1/21 test\n            socketRef.current.on(\"killconnection\", killIt);\n            // 1/1/21 test\n        });\n\n    }, []);\n\n  \n\n    function callUser(userID) {\n        peerRef.current = createPeer(userID); \n        // userID is the socket.id of the OTHER PERSON in the room \n        // it is used in the createPeer function and set to the peerRef hook  \n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        //giving our peer individual access to our stream so they can view on their end\n    }\n\n\n        // 1/1/21 test\n            // peerRef.current = {};\n            // peerRef.current[userID] = createPeer(userID)\n        // 1/1/21 test\n    // }   \n    // userStream.current was set to the MediaStream above\n    // i imagine i\n\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.stunprotocol.org\"\n                },\n                {\n                    urls: 'turn:numb.viagenie.ca',\n                    credential: 'muazkh',\n                    username: 'webrtc@live.com'\n                },\n            ]\n        }); \n        // this constructor takes in an array of objects, these objects are servers which allow peers to connect, should \n        // use your own, look into creating one \n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n\n        // still in the process of calling the other user/ connecting to the other users socket \n        //starts off by instantiating a RTCPeerConnection, this is used to connect two peers and maintain the connection\n\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => { // createOffer is a RTCPeerConnection method\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    function handleRecieveCall(incoming) {\n        peerRef.current = createPeer();\n        const desc = new RTCSessionDescription(incoming.sdp);\n        peerRef.current.setRemoteDescription(desc).then(() => {\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    } // this function is handling events related to someone calling the user \n\n    function handleAnswer(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    } \n\n    // this handles answers both for the caller and the callee because it essentially to establish the connection it needs to \n\n    function handleICECandidateEvent(e) {\n        if (e.candidate) { // is e.candidate the current user / client \n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate, // this e.candidate is like a ICE config used to establish an RTCPeerConnection\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) { // incoming maybe whoever is calling \n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate) \n            .catch(e => console.log(e));\n    } // one perspective is from the user you're calling, the other user. Adds this icecandidate to it's peerRef as a key value pair? \n\n    function handleTrackEvent(e) {\n        partnerVideo.current.srcObject = e.streams[0];\n\n    }; // creating a video for the person you're calling? \n\n\n    // function hangUp(e) {\n    //     console.log(peerRef.current)\n    //     console.log(socketRef.current)\n    //     console.log(\"make this hangup button\")\n    //     socketRef.current.emit(\"hang up\")\n    //     console.log(userVideo.current)\n    //     let vid = document.getElementById(\"myVideo\")\n    //     vid.parentNode.removeChild(vid);\n    //     console.log('final step?')\n    // };\n\n\n\n    //cuts connection when user leaves page\n    useEffect(() => {\n        return () => {\n            stopStreamedVideo()\n        }\n    },[])\n\n    \n\n    //! VIDEO function\n    const playStop = () => {\n        let enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n        if(enabled){\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n            // console.log('false', enabled)\n            setVideo('Video On')\n        }else{\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n            // console.log('true', enabled)\n            setVideo('Video Off')\n        }\n    }\n\n    //! Cut connection of the person leaving page - media stream only.\n    const stopStreamedVideo = () => {\n        const tracks = userStream.current.getTracks();\n        // console.log(tracks);\n        \n        //!TEST - WL  - Intent here is the black the screen whenever some oneleaves\n        // let enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n        // if(enabled){\n        //     userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n        // }\n        //!TEST\n        // userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n\n        //note - stream.stop() is deprecated. Do not use\n        tracks.forEach(function(track) {\n            track.stop();\n            \n        });\n        //! @TOM FYI ADDING IT TO THIS BUTTON\n        testFeatures()\n        // props.history.goBack()\n        // console.log(props.history)\n    }\n\n\n    //! MUTE function\n    const muteStream = () => {\n        const enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n        if(enabled){\n            userVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n            setMute('Unmute')\n            // console.log('false', enabled)\n            // console.log(peerRef)\n            // console.log(peerRef.current)\n            // console.log(userStream)\n            // console.log(userStream.current)\n            \n            // console.log(props.history)\n\n        }else {\n            userVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n            // console.log('true', enabled)\n            setMute('Mute')\n            // console.log(props)\n\n        }\n    }\n    \n    // function muteStream() {\n    //     const tracks = userStream.current.getAudioTracks();\n    //     //note - stream.stop() is deprecated. Do not use\n    //     console.log('audio', tracks)\n    //     tracks.forEach(function(track) {\n    //         track.stop();\n    //     });\n    //     console.log('audio', tracks)\n\n    // }\n    const hangUpButton = () => {\n        onLeave();\n    }\n\n    function onLeave() {\n        userVideo.current.srcObject = null;\n        partnerVideo.current.srcObject = null;\n        peerRef.current.close();\n        peerRef.current.onicecandidate = null;\n        peerRef.current.onaddstream = null;\n        createPeer()\n    };\n\n    // 1/1/21 test\n      const killIt = () => {\n        peerRef.current.close()\n    }\n    // 1/1/21 test\n\n    const testFeatures = () => {\n        // peerRef.current.close(); // works but only if there is a peerRef (only if a connection has been established)\n        //!@TOM added this conditional for your above comment\n        if (peerRef.current){\n            socketRef.current.emit(\"hangUp\", otherUser.current)\n            peerRef.current.close()\n\n        }\n\n    }\n    \n   \n    \n    return (\n        <div className='room_container'>\n            {/* button below now functions with leave meeting */}\n            {/* <button onClick={() => testFeatures()}>Test Button</button> */}\n\n            <div className=\"main\">\n                        <div className=\"video_titles\">\n                            <h1 className=\"title\">{props.user}</h1>\n                            <h1 className=\"title\">{otherUserName.current}</h1>\n                        </div>\n                <div className=\"main_videos\">\n                    <div id=\"video-grid\">\n                        <div>\n                            <video id=\"myVideo\" autoPlay ref={userVideo} muted/>\n                        </div>\n                        <div>\n                            <video autoPlay ref={partnerVideo} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"main_controls_container\">\n                    <div className='main_controls'>\n                        <div>\n                            <button onClick={() => muteStream()}>{mute}</button> \n                            <button onClick={() => playStop()}>{video}</button>  \n                        </div>\n                        <div>\n                            <Link to='/'>\n                                <button onClick={() => stopStreamedVideo()}>Leave Meeting</button>  \n                            </Link>\n\n                        </div>\n                    </div>\n                </div>   \n            </div>\n\n        </div>\n    );\n};\n\nexport default Room;","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/questions_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/profile_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/questions_errors_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/responses_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/messages_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/responses_errors_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/questions_actions.js",["242"],"import * as QuestionsAPIUtil from \"../util/questions_api_util\"\n\nexport const RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport const RECEIVE_PROFILE_QUESTIONS = \"RECEIVE_PROFILE_QUESTIONS\";\nexport const RECEIVE_QUESTION = \"RECEIVE_QUESTION\"\nexport const REMOVE_QUESTION = \"REMOVE_QUESTION\"\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\"\n\n\n\nexport const RECEIVE_RESPONSE = 'RECEIVE_RESPONSE';\nexport const receiveResponse = (response) => {\n    return {\n        type: RECEIVE_RESPONSE,\n        response\n    }\n}\n\nconst receiveProfileQuestions = (questions) => {\n    return {\n        type: RECEIVE_PROFILE_QUESTIONS,\n        questions // ES6 synthax = questions: questions \n    }\n}\n\nconst receiveQuestions = (questions) => {\n    return {\n        type: RECEIVE_QUESTIONS, \n        questions // ES6 synthax = questions: questions \n    }\n}\n\nconst receiveQuestion = (question) => {\n    return {\n        type: RECEIVE_QUESTION, \n        question\n    }\n}\n\nconst removeQuestion = (question) => {\n    return {\n        type: REMOVE_QUESTION,\n        question \n    }\n} \n// model action should find the question by it's id and delete it, but return the question in case we need to remove it \n// from the state\n\nconst receiveQuestionErrors = (errors) => {\n    return {\n        type: RECEIVE_ERRORS, \n        errors \n    }\n}\n\nexport const fetchQuestions = () => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestions()\n        .then( res => { dispatch(receiveQuestions(res.data)) } )\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\n\nexport const fetchProfileQuestions = (questions) => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestions(questions)\n        .then(res => dispatch(receiveProfileQuestions(res.data)))\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\nexport const fetchQuestion = (questionId) => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestion(questionId)\n        .then(res => ( dispatch(receiveQuestion(res.data)), dispatch(receiveResponse(res.data.responses))))\n        .catch(err => (dispatch(receiveQuestionErrors(err))))\n}\n\nexport const postQuestion = (newQuestion) => (dispatch) => {\n    return QuestionsAPIUtil.postQuestion(newQuestion)\n        .then( res => { dispatch(receiveQuestion(res.data)) })\n        .catch( errors => { dispatch(receiveQuestionErrors(errors.response.data)) })\n}\n\n\nexport const updateQuestion = (questionId, questionUpdates) => (dispatch) =>{\n    return QuestionsAPIUtil.updateQuestion(questionId, questionUpdates)\n        .then( res => { dispatch(receiveQuestion(res.data))})\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\nexport const deleteQuestion = (questionId) => (dispatch) => {\n    return QuestionsAPIUtil.deleteQuestion(questionId)\n        .then( res => { dispatch(removeQuestion(res.data)) })\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\n","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board.js",["243"],"import React from 'react'\nimport QuestionIndex from '../question/question_index'\nimport ResolvedIndex from '../resolved/resolved_index'\nimport '../../assets/stylesheets/bulletin_board.css'\nimport CreateQuestionFormContainer from '../question/create_question_form_container'\n\n\n\nclass BulletinBoard extends React.Component{\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            idx: 0\n        }\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    componentDidMount() {\n        this.props.fetchQuestions()\n    }\n\n\n    handleClick(num){\n        this.setState({idx: num})\n    }\n\n\n    isEmpty(obj) {\n        return Object.keys(obj).length === 0;\n    }\n\n    render(){\n        \n\n        // console.log(this.props.questions)\n\n        if(this.isEmpty(this.props.questions)){\n            return(\n                null\n            )\n        }else{\n            // console.log(this.props.questions)\n            const questionArray = []\n            const resolvedArray = []\n            const usernames = []\n            Object.values(this.props.questions).forEach(question => {\n                if(question.solved === false){\n                    questionArray.push(question)\n                }else{\n                    resolvedArray.push(question)\n                }\n                usernames.push(question.user)\n\n            })\n            // console.log(questionArray)\n            return(\n                <div>\n                    <h1></h1>\n\n                    <div>\n                        <div className='qr'>\n                            <div className='questionsTab' onClick={() => this.handleClick(0)}>Questions</div>\n                            <div className='resolvedQuestionsTab' onClick={() => this.handleClick(1)}>Resolved Questions</div>\n                        </div>\n\n                        {this.state.idx === 0 ? <QuestionIndex questions={questionArray} /> \n                        : \n                        <ResolvedIndex resolved={resolvedArray}/>}\n\n                    </div>\n                    <div className='questionForm'>\n                        <CreateQuestionFormContainer />\n                    </div>\n                </div>\n            )\n        }\n    }\n\n\n}\n\nexport default BulletinBoard\n\n\n","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/login_form.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_show.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/session_errors_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/nav/navbar.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/reducers/user_reducer.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/profile/profile.js",["244","245"],"import React from 'react';\n// import CreateQuestionFormContainer from '../question/create_question_form_container'\nimport {Link} from 'react-router-dom'\nimport '../../assets/stylesheets/profile.scss';\n\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.caseResolved = this.caseResolved.bind(this);\n    }\n\n\n    componentDidMount() {\n        // console.log(this.props.currentUser.questions)\n        this.props.fetchProfileQuestions(this.props.currentUser.questions)\n        this.props.fetchUser(); \n    }\n\n\n    caseResolved(bool){\n        if (bool === 'false'){\n            return (\n                <div className='bool_info'>\n                    False\n                </div>\n            )\n        }else{\n            return (\n                <div className='bool_info2'>\n                    True\n                </div>\n            )\n        }\n    }\n    \n\n    render() {\n        let boolean = false;\n        let amtOfPost = 0;\n        let amtOfResponse = 0;\n\n        const profile_questions = () => {\n            \n            if(this.props.currentUser.questions.length > 0){\n                return(\n                    this.props.currentUser.questions.map((question, id) => {\n\n                        return (\n                                <div key={id} className='questions_topic'>\n                                    <div className='individual_case'>\n                                        <label>\n                                            <div className='sub_label'>Case Id:</div>\n                                            <Link to={`/question/${question._id}`}>\n                                            <div className='actual_info'>{question._id}</div>\n                                            </Link>\n                                        </label>\n                                        <label>\n                                                <div className='sub_label'>Subject:</div>\n                                                <div className='actual_info'>{question.subject}</div>\n                                        </label>\n                                        <label>\n                                            <div className='sub_label'>Case Closed: </div>\n                                                {question.solved ? 'True' : 'False'}\n                                        </label>\n                                    </div>    \n                                </div>\n                        )\n\n                        // if(this.props.currentUser.questions.includes(question._id)){\n                        //     // console.log('jjello', this.props.currentUser);\n                        //     if(question.user._id === this.props.currentUser.id){\n                        //         // console.log('bellow', (question.user._id));\n                        //         amtOfPost += 1;\n                        //         {`${question.solved}` === 'false' ? boolean = 'false' : boolean = true}\n                        //         return(\n                        //             <div key={id} className='questions_topic'>\n                        //                 <div className='individual_case'>\n                        //                     <label>\n                        //                         <div className='sub_label'>Case Id:</div>\n                        //                         <Link to={`/question/${question._id}`}>\n                        //                         <div className='actual_info'>{question._id}</div>\n                        //                         </Link>\n                        //                     </label>\n                        //                     <label>\n                        //                         <div className='sub_label'>Subject:</div>\n                        //                         <div className='actual_info'>{question.subject}</div>\n                        //                     </label>\n                        //                     <label>\n                        //                         <div className='sub_label'>Case Closed: </div>\n                        //                         {/* <div className='actual_info'>{`${question.solved}`}</div> */}\n                        //                         {this.caseResolved(boolean)}\n                        //                     </label>\n                        //                 </div>\n                                        \n                        //             </div>\n                        //         )\n                            // }\n                            \n                            //! USERS ANSWERED/RESPONDED POSTS. REVISIT AFTER COHORT. SHOULD BE A SEPARATE IF STATEMENT\n                            // else{\n                            //     return (\n                            //         <div key={id}>\n                            //             <div className=\"post_answered_title\">Posts Answered:</div>\n                            //             <div>SUBJECT:\n                            //                 <Link to={`/question/${question._id}`}>\n                            //                     {question.subject}\n                            //                 </Link>\n                            //             </div>\n                            //             <div>CONTENT: \n                            //                 {question.content}\n                            //             </div>\n                            //         </div>\n                            //     )\n                            // }\n                        // }\n                        \n                    })\n                )\n                // console.log(this.props.profile_questions)\n            }\n        }\n\n\n\n        const profile_responses = () => {\n\n            if(this.props.profile_questions.length > 0){\n                return(\n                    this.props.profile_questions.map((question, id) => {\n                        return(\n                            question.responses.map((response, id) => {\n                                if(response.user._id === this.props.currentUser.id){\n                                    amtOfResponse += 1;\n                                    return (\n                                        <div key={id} className='questions_topic'>\n                                            <div className='individual_case'>\n                                                <label>\n                                                    <div className='sub_label'>Relating to Case Id:</div>\n                                                    <Link to={`/question/${question._id}`}>\n                                                    <div className='actual_info'>{question._id}</div>\n                                                    </Link>\n                                                </label>\n                                                <label>\n                                                    <div className='sub_label'>Response:</div>\n                                                    <div className='actual_info'>{response.answer}</div>\n                                                </label>\n                                            </div>\n                                        </div>\n                                    )\n\n                                }\n                            }) \n                        )                           \n                    }\n                ) \n                \n            )}\n        }\n        // console.log('user stuff', this.props.currentUser.id)\n        return(\n            <div className='profile_container'>\n                \n                <div className=\"created_post_info\">\n                    <div className=\"created_post_title\">Created Posts:</div>\n\n                    {profile_questions()}\n\n                    <div className=\"responed_post_title\">Response to Posts:</div>\n\n                    {profile_responses()}\n\n                </div>\n\n                <div className=\"user_profile_info\">\n                    <div className='profile_name'>{this.props.currentUser.username}'s Profile</div>\n                    <img alt=\"robots\" src={`https://robohash.org/${this.props.currentUser.id}?100x100`} className='roboImgApi'/>\n\n                    <div className='profile_post_amt'>Number of Posts: {amtOfPost}</div>\n                    <div className='profile_reponse_amt'>Response to Posts: {amtOfResponse}</div>\n                </div>\n\n\n            </div>\n            \n        )\n    }\n}\n\nexport default Profile;","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/session/signup_form.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_show.js",["246"],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_index.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/messages_actions.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/questions_api_util.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/actions/responses_actions.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/create_question_form_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/resolved/resolved_index.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/update_question_form_container.js",["247"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport { updateQuestion } from '../../actions/questions_actions'\nimport QuestionForm from './question_form'\n\n\nexport class UpdateQuestionForm extends React.Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    componentDidMount() {\n        this.props.receiveReview(this.props.reviewId)\n    }\n\n    render() {\n       const {questionId, subject, content, tag, solved, user} = this.props\n        return (\n            <QuestionForm  \n                questionId = {questionId}\n                subject={subject}\n                content={content}\n                tag={tag}\n                solved={solved}\n                user={user}\n                \n            />\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state) => {\n    \n    return ({ formType: 'Update Question!', errors: state.errors.questions}\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    processForm: (questionId, questionUpdates) => dispatch(updateQuestion(questionId, questionUpdates))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionForm)","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/chatroom/create_room.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_item_container.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/create_answers_form_container.js",["248"],"import {connect} from 'react-redux'\nimport ResponseForm from './answer_form'\nimport {postResponse} from '../../actions/responses_actions'\nimport {fetchQuestion} from '../../actions/questions_actions'\nimport {fetchUser} from '../../actions/session_actions';\n\n\nconst mapStateToProps = (state, props,)=> { \n    return (\n    {newResponse: {\n        consultation: '',\n        answer: '',\n        user: state.session.user.id\n    },\n    formType: 'Reply',\n    currentUser: state.entities.currentUser, \n    })\n}\n\nconst mapDispatchToProps = dispatch => ({\n    processForm: (questionID, newResponse) => dispatch(postResponse(questionID, newResponse)),\n    fetchUser: () => dispatch(fetchUser())\n\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ResponseForm)","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/messages_api_util.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/util/responses_api_util.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_form.js",["249"],"import React from 'react'\nimport mongoose from 'mongoose';\nimport '../../assets/stylesheets/answer_form.css'\n\n\nclass ResponseForm extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            consultation:'',\n            answer: this.props.answer,\n            errors: \"\"\n        }\n        this.submit = this.submit.bind(this)\n        this.update = this.update.bind(this)\n    }\n\n    update(field){\n        return (e) => this.setState({[field]: e.currentTarget.value})\n    }\n\n\n\n    async submit(e){\n\n        e.preventDefault();\n        let newResponse = {\n            user: this.props.user,\n            consultation: this.state.consultation,\n            answer: this.state.answer\n        };\n       \n\n        if(!newResponse.consultation){\n            this.setState({errors: \"please pick a consultation date\"})\n        }\n        else if(!newResponse.answer){\n            this.setState({errors: \"please write out your response\"})\n\n        }\n        else {\n            await this.props.processForm(this.props.questionID, newResponse)\n            this.props.fetchQuestion(this.props.questionID)\n            //clear errors and form fields\n            this.setState({errors: \"\"})\n            this.setState({consultation: \"\"})\n            this.setState({answer: \"\"})\n\n         \n        }\n    }\n    // componentWillReceiveProps(nextProps) {\n    //     this.setState({ errors: nextProps.errors })\n    // }\n\n   \n   \n\n\n    render(){\n          console.log(this.props.currentUser) \n        return(\n            <form className = \"response-form\" onSubmit={this.submit}>\n                <div>\n                    <div className=\"errors\">\n                    <p>{this.state.errors}</p>\n                    </div>\n                <div className=\"respondant-header\">\n                <img className = \"respondants-image\" alt=\"robots\" src={`https://robohash.org/${this.props.currentUser.id}?100x100`} />\n                <label className = \"consoldation-label\">\n                    Consultation Date: <input className =\"response-date\" type=\"date\" value={this.state.consultation} onChange={this.update('consultation')}/>\n                </label>\n                </div>\n                </div>\n                <div>\n                <label>\n                   <textarea className = \"response-text-area\" placeholder=\"Write a Response...\" type='text' value={this.state.answer} onChange={this.update('answer')}/>\n                </label>\n                </div>\n\n                <div>\n                <label>\n                    <button className = \"response-submission-button\" type='submit'>{this.props.formType}</button>\n                </label>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default ResponseForm ","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index.js",["250"],"import React from 'react'\nimport AnswerIndexItemContainer from '../answer/answer_index_item_container'\nimport { allUsers } from '../../util/session_api_util'\n\nclass AnswerIndex extends React.Component {\n   constructor(props) {\n       super(props)\n\n\n\n       this.createChat = this.createChat.bind(this);\n   }\n\n   async createChat(questionID, responseID, responseUserID, posterID){\n        let newChat = {\n            questionID: questionID, \n            responseID: responseID, \n            posterID: posterID,\n            responseUserID: responseUserID\n        };\n       await this.props.createChat(newChat);\n        this.props.fetchUser()\n\n   }\n    \n\n\n    render() {\n        let questionID = this.props.questionID;\n        return(\n\n        <div>\n            {this.props.responses.map((response, i) =>{\n                    return(\n                    <div key={i}>\n                        <AnswerIndexItemContainer fetchQuestion={this.props.fetchQuestion}  response={response} questionID = {this.props.questionID} currentUserID={this.props.currentUserID} />\n                        <button className=\"chatButton\" onClick={ () => {this.createChat(questionID, response._id, response.user._id, this.props.posterID)}}> Start a chat with {response.user.username}!</button>\n                    </div>\n                    )\n            })}\n        </div>\n        )\n    }\n}\n\nexport default AnswerIndex\n\n// 'responseID': response._id, 'responseUserID':response.user._id, 'posterID': this.props.posterID\n\n                                \n","/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/answer/answer_index_item.js",[],"/Users/shanesharareh/Desktop/App Academy/TBD2/TBDeveloped/frontend/src/components/question/question_form.js",["251"],"import React from 'react'\nimport {Link} from 'react-router-dom'\nimport '../../assets/stylesheets/question_form.css'\n\n\nclass QuestionForm extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            subject: '',\n            content: this.props.content,\n            tag: this.props.tag,\n            solved: this.props.solved,\n            errors: this.props.errors,\n            tagSelected: true\n            \n        }\n\n        this.submit = this.submit.bind(this)\n        this.updateSubmit = this.updateSubmit.bind(this)\n        this.update = this.update.bind(this)\n\n        \n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        this.setState({ errors: nextProps.errors })\n    }\n\n    update(field){\n        return (e) => this.setState({[field]: e.currentTarget.value})\n    }\n\n\n    async submit(e){\n        e.preventDefault();\n        let newQuestion = {\n            subject: this.state.subject,\n            content: this.state.content,\n            solved: this.state.solved,\n            tag: this.state.tag,\n            user: this.props.user\n        };\n        await this.props.processForm(newQuestion)\n        if(Object.keys(this.state.errors).length === 0){\n            this.setState({subject: \"\"})\n            this.setState({content: \"\"})\n            this.props.fetchQuestions()\n        }\n        console.log(this.state.errors)\n\n    }\n\n    updateSubmit(e) {\n        // console.log(this.props.questionId)\n        e.preventDefault();\n        let newQuestion = {\n            \n            content: this.state.content,\n            solved: this.state.solved,\n            tag: this.state.tag,\n            user: this.props.user\n\n        };\n        this.props.processForm(this.props.questionId, newQuestion)\n    }\n    \n    renderErrors() {\n        return (\n            <ul>\n                {Object.keys(this.state.errors).map((error, i) => (\n                    <li key={`error-${i}`}>\n                        {this.state.errors[error]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n\n\n    render(){\n        if (this.props.formType === 'Update Question!'){\n            return (\n            <div className = \"updateForm_container\">\n\n                <form onSubmit={this.updateSubmit}>\n                        <h2 className=\"update_form_header\">Edit Post</h2>\n                    <div>\n                    <label>\n                        Content: <textarea type='text' value={this.state.content} onChange={this.update('content')} />\n                    </label>\n                    </div>\n                    <div>\n                    <label>Tag\n                        <select onChange={this.update('tag')} >\n                            <option value=''>--Choose a tag--</option>\n                            <option value='idea'>Idea</option>\n                            <option value='question'>Question</option>\n                        </select>\n                    </label>\n                    </div>\n                    <div>\n                    <label>Solved\n                        <select onChange={this.update('solved')} >\n                            <option value=''>--Choose a tag--</option>\n                            <option value='true'>True</option>\n                            <option value='false'>False</option>\n                        </select>\n                    </label>\n                    </div>\n                    <label>\n                        <button type='submit'>{this.props.formType}</button>\n                    </label>\n\n                </form>\n            </div>\n\n            )\n        }\n        return(\n            <div className=\"createform_container\">\n                <form onSubmit={this.submit}>\n                    <div>\n                        <label>\n                            Subject: <input className=\"question-subject\" type=\"text\" value={this.state.subject} onChange={this.update('subject')}/>\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Content: <textarea className=\"question-subject\" value={this.state.content} onChange={this.update('content')}/>\n                        </label>\n\n                    </div>\n                    <div>\n                        <label>\n                            <select onChange={this.update('tag')} >\n                                <option value='' selected={this.state.tagSelected}>--Choose a tag--</option>\n                                <option value='idea'>Idea</option>\n                                <option value='question'>Question</option>\n                            </select>\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                                <button className=\"submit-question-button\" type='submit'>{this.props.formType}</button>\n                                {this.renderErrors()}\n                        </label>\n                    </div>\n                    \n\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default QuestionForm ",{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":14,"column":8,"nodeType":"258","messageId":"259","endLine":14,"endColumn":12},{"ruleId":"260","severity":1,"message":"261","line":5,"column":1,"nodeType":"262","endLine":33,"endColumn":2},{"ruleId":"256","severity":1,"message":"263","line":13,"column":14,"nodeType":"258","messageId":"259","endLine":13,"endColumn":19},{"ruleId":"256","severity":1,"message":"264","line":16,"column":15,"nodeType":"258","messageId":"259","endLine":16,"endColumn":22},{"ruleId":"256","severity":1,"message":"265","line":37,"column":11,"nodeType":"258","messageId":"259","endLine":37,"endColumn":22},{"ruleId":"266","severity":1,"message":"267","line":37,"column":32,"nodeType":"268","messageId":"269","endLine":37,"endColumn":43},{"ruleId":"266","severity":1,"message":"267","line":38,"column":31,"nodeType":"268","messageId":"269","endLine":38,"endColumn":42},{"ruleId":"270","severity":1,"message":"271","line":161,"column":8,"nodeType":"272","endLine":161,"endColumn":10,"suggestions":"273"},{"ruleId":"270","severity":1,"message":"274","line":289,"column":7,"nodeType":"272","endLine":289,"endColumn":9,"suggestions":"275"},{"ruleId":"256","severity":1,"message":"276","line":365,"column":11,"nodeType":"258","messageId":"259","endLine":365,"endColumn":23},{"ruleId":"277","severity":1,"message":"278","line":71,"column":59,"nodeType":"279","messageId":"280","endLine":71,"endColumn":60},{"ruleId":"281","severity":1,"message":"282","line":59,"column":21,"nodeType":"283","endLine":59,"endColumn":25},{"ruleId":"256","severity":1,"message":"284","line":40,"column":13,"nodeType":"258","messageId":"259","endLine":40,"endColumn":20},{"ruleId":"285","severity":1,"message":"286","line":133,"column":67,"nodeType":"287","messageId":"288","endLine":133,"endColumn":69},{"ruleId":"285","severity":1,"message":"286","line":83,"column":58,"nodeType":"287","messageId":"288","endLine":83,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":9,"column":5,"nodeType":"291","messageId":"292","endLine":11,"endColumn":6},{"ruleId":"256","severity":1,"message":"293","line":4,"column":9,"nodeType":"258","messageId":"259","endLine":4,"endColumn":22},{"ruleId":"256","severity":1,"message":"294","line":2,"column":8,"nodeType":"258","messageId":"259","endLine":2,"endColumn":16},{"ruleId":"256","severity":1,"message":"295","line":3,"column":10,"nodeType":"258","messageId":"259","endLine":3,"endColumn":18},{"ruleId":"256","severity":1,"message":"296","line":2,"column":9,"nodeType":"258","messageId":"259","endLine":2,"endColumn":13},"no-native-reassign",["297"],"no-negated-in-lhs",["298"],"no-unused-vars","'Room' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'peers' is assigned a value but never used.","'trigger' is assigned a value but never used.","'otherVideos' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callUser', 'handleRecieveCall', 'props.match.params.roomID', and 'props.user'. Either include them or remove the dependency array.","ArrayExpression",["299"],"React Hook useEffect has a missing dependency: 'stopStreamedVideo'. Either include it or remove the dependency array.",["300"],"'hangUpButton' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'boolean' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'fetchQuestion' is defined but never used.","'mongoose' is defined but never used.","'allUsers' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},"Update the dependencies array to be: [callUser, handleRecieveCall, props.match.params.roomID, props.user]",{"range":"305","text":"306"},"Update the dependencies array to be: [stopStreamedVideo]",{"range":"307","text":"308"},[5970,5972],"[callUser, handleRecieveCall, props.match.params.roomID, props.user]",[10779,10781],"[stopStreamedVideo]"]